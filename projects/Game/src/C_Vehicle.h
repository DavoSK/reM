#pragma once
#include <cstdint>
#include <I3d_math.h>
#pragma pack(push,1)

class I3D_frame;
class I3D_sound;

struct S_wheel 
{
	uint32_t _pad0;
	I3D_frame* m_pFrame;
	uint8_t _pad1[80];
	S_vector m_aVecUnk1;
	S_vector m_aVecUnk2;
	uint8_t _pad4[156];
	float m_fUnk1;
	float m_fUnk2;
	float m_fRotationXAxis;
	uint32_t _pad2[2];
	uint32_t m_uFlags;
	uint8_t _pad3[100];
	float m_fWheelOutOfAxis;
};

struct S_CARINIT
{
	uint8_t _pad0[3172];
	char m_szSoundEngineOn[16];
	char m_szSoundEngineOff[16];
	char m_szSoundEngineBad[16];
	char m_szSoundEngineNpc[16];
	char m_szSoundEngineForward[10][16];
	char m_szSoundEngineReverse[5][16];
	char m_szSoundEngineIdle[2][16];
	char m_szSoundHorn[16];
	char m_szSoundSiren[16];
	char m_szSoundHandbrake[16];
	char m_szSoundGearNext[16];
	char m_szSoundGearPrev[16];
	char m_szSoundDrift[16];
	char m_szSoundUnk[16];
	char m_szSoundCrashAbsorber[16];
	char m_szSoundShotInWheel[16];
	char m_szSoundGlassBreak[16];
	char m_szSoundCrashA1[16];
	char m_szSoundCrashK1[16];
	char m_szSoundCrashB1[16];
	char m_szSoundCrashC1[16];
	char m_szSoundCrashA2[16];
	char m_szSoundCrashK2[16];
	char m_szSoundCrashB2[16];
	char m_szSoundCrashC2[16];
	char m_szSoundDoorOpen[16];
	char m_szSoundDoorClose[16];
	uint8_t _pad1[560];
};

static_assert(sizeof(S_CARINIT) == 0x1124);

class C_Vehicle
{
public:
	S_vector* GetWheelCamPos(S_vector* outPos, int wheelIdx, S_vector* pos);
	bool Engine(float a1, float a2, float a3);
	bool Move(float a1, float a2, float a3, float a4, float a5, float a6);
	bool SetGear(int32_t iGear);
	bool SetBrake(float fBrake);
	bool SetSpeedLimit(float fLimit);
	bool SetClutch(float fClutch);
	bool SetSteer(float fSteer);
	bool SetSteeringLinearity(float fLin);
	bool SetFuel(float fFuel);
	bool SetHandbrake(bool bDoBrake);
	bool SoundOff();
	bool EnableSounds(bool bEnable);
	bool UpdateSteeringWheels(float fDeltaTime);
	I3D_sound* SoundInit(const char* szSound, I3D_sound** pSoundOut, uint32_t uType, float v1, float v2, float v3, float v4, bool b1, bool b2);
	bool InitSounds(S_CARINIT* init);
	int LockVehicle(bool bLock);
	int HornSnd(bool bHorn);

	static void InitHooks();
private:
	uint8_t _pad1[100];
	uint16_t m_iMoveFramesCnt;
	uint16_t m_iCurrentMoveFrame;
	S_vector m_aMovPosition;
	S_vector m_aMovForward;
	S_vector m_aMovUp;
	S_vector m_aMovRight;
	uint8_t _pad2[40];
	int m_iLockCount;
	char _pad2_1[212];
	float m_fSteeringLinearity;
	float m_fClutchLinearity;
	uint8_t _pad3[4];
	int m_uFlags;
	uint8_t _pad4[12];
	float m_fEngineHealth;
	uint8_t _pad5[52];
	float m_fHealth;
	uint8_t _pad6[40];
	void* m_pFirstMesh;
	void* m_pLastMesh;
	uint8_t _pad7[196];
	void* m_pCallbackCC;
	void* m_pCallbackCC1;
	void* m_pCallbackACI;
	void* m_pCallbackAF;
	void* m_pCallbackWC;
	void* m_pCallbackPD;
	void* m_pCallbackPDW;
	void* m_pCallbackBG;
	void* m_pCallbackUnk;
	void* m_pCallbackWU;
	void* m_pCallbackCFB;
	void* m_pCallbackCFW;
	void* m_pCallbackDVP;
	void* m_pCallbackVR;
	void* m_pCallbackLP;
	S_vector m_aPosition;
	uint8_t _pad8[132];
	float m_fMaxHandbrakeForce;
	float m_fHandbrakeMax;
	float m_fHandbrakeCurrent;
	uint8_t _pad9[12];
	float m_fBrakeMax;
	float m_fBrakeCurrent;
	uint8_t _pad10[80];
	S_vector m_aAngularVelocity;
	uint8_t _pad11[4];
	uint8_t m_bHorn;
	uint8_t m_bSiren;
	uint8_t m_bSoundEnabled;
	uint8_t _pad12_f;
	float m_fHandbrake;
	uint8_t _pad12[108];
	float m_fSpeedLimit;
	uint8_t m_bDontInterpolateSteering;
	uint8_t _pad13;
	uint8_t m_bDontInterpolateBrake;
	uint8_t m_bDontInterpolateClutch;
	uint8_t _pad14[24];
	uint32_t m_iWheelCnt;
	float m_fDeltaUpdateTime;
	uint8_t _pad15[116];
	float m_fAccelerating;
	uint8_t _pad16[4];
	char m_fUnk0;
	uint8_t _pad16_2[7];
	float m_fEngineRpm;
	uint8_t _pad17[8];
	int32_t m_iLastGear;
	int32_t m_iGear;
	uint8_t _pad18[4];
	int32_t m_iMaxGear;
	int32_t m_iUnk1;
	float m_GearRatios[4];
	uint8_t _pad19[28];
	float m_fSpeed;
	uint8_t _pad20[24];
	float m_fBrake;
	uint8_t _pad21[36];
	float m_fClutch;
	uint8_t _pad22[4];
	int m_Punk0;
	char _pad22APol[16];
	float m_fMass;
	char _pad22ATristrvrte[16];
	float m_fMaxSteerAngle;
	uint8_t _pad23[16];
	float m_fSteerAngle;
	uint8_t _pad24[116];
	I3D_sound* m_pHornSound2;
	I3D_sound* m_pSirenSound2;
	uint8_t _pad24_2[648];
	I3D_sound* m_pEngineOnSound;
	I3D_sound* m_pEngineOffSound;
	I3D_sound* m_pEngineBadSound;
	I3D_sound* m_pEngineNpcSound;
	I3D_sound* m_pEngineForwardSounds[10];
	I3D_sound* m_pEngineReverseSounds[5];
	I3D_sound* m_pEngineIdleSounds[2];
	I3D_sound* m_pHornSound;
	I3D_sound* m_pSirenSound;
	I3D_sound* m_pHandbrakeSound;
	I3D_sound* m_pGearNextSound;
	I3D_sound* m_pGearPrevSound;
	I3D_sound* m_pDriftSound;
	I3D_sound* m_pUnkSound;
	I3D_sound* m_pCrashAbsorberSound;
	I3D_sound* m_pShotInWheelSound;
	I3D_sound* m_pCrashA1Sound;
	I3D_sound* m_pCrashK1Sound;
	I3D_sound* m_pCrashB1Sound;
	I3D_sound* m_pCrashC1Sound;
	I3D_sound* m_pCrashA2Sound;
	I3D_sound* m_pCrashK2Sound;
	I3D_sound* m_pCrashB2Sound;
	I3D_sound* m_pCrashC2Sound;
	I3D_sound* m_pDoorOpenSound;
	I3D_sound* m_pDoorCloseSound;
	I3D_sound* m_pWheelPunctureSound;
	char _pad25[596];
	float m_fTimePerMoveFrame;
	uint8_t _pad25_1[4];
	uint8_t m_bIsEngineRunning;
	uint8_t _pad25_2[2];
	uint8_t m_bEngineOn;
	float m_fFuel;
	uint8_t _pad26[4];
	S_wheel** m_pWheels;
	S_vector m_aForward;
	S_vector m_aRight;
	S_vector m_aUp;
	uint8_t _pad27[68];
	void* m_pCarDoors;
	uint8_t _pad27_1[320];
	S_matrix m_mUnk0;
	S_matrix m_mUnk1;
	uint8_t _pad27_3[4];
	S_CARINIT m_aCarInit;
	uint8_t _pad27_4[4];
	S_vector m_aSpeed;
	float m_fMaxFuel;
};

#pragma pack(pop)
//static_assert(sizeof(C_Vehicle) == 0x21AC);